" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2011 Apr 15
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.


if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
"if has('mouse')
"  set mouse=a
"endif
"set t_Co=256
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
  "au BufNewFile,BufRead *.cpp set syntax=cpp11

  augroup END

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
" ============
" Environment
" ============
set nocompatible               " be iMproved
syntax on
" 行控制
set noscrollbind
"set linebreak
set nocompatible
set textwidth=120
set wrap
"让vim在当前窗口能显示这行字的多少就显示多少，而不是等整行字都能显示时才将其显示出来。
set display=lastline
"光标上下两侧最少保留的屏幕行数u
set scrolloff=3
" 标签
set tabpagemax=9
set showtabline=2
" 行号和标尺
set nonumber
set ruler
" 命令行于状态行
"set ch=1 "cmdheight
set ls=2 " 始终显示状态行
set wildmenu "命令行补全以增强模式运行
" Search Option
"忽略大小写
set ic
set hlsearch  " Highlight search things
set magic     " Set magic on, for regular expressions
set showmatch " Show matching bracets when text indicator is over them
set mat=2     " How many tenths of a second to blink
set noincsearch
" 制表符
set tabstop=4
set expandtab
set smarttab
set shiftwidth=4
set softtabstop=4
set iskeyword+=_,$,@,%,#,-
" 状态栏显示目前所执行的指令
set showcmd
" 缩进
set autoindent
set smartindent
" 自动重新读入
set autoread
" 插入模式下使用 <BS>、<Del> <C-W> <C-U>
set backspace=indent,eol,start
" 跨行移动  nocompatible set default b,s
set whichwrap=h,l,<,>
" 设定在任何模式下鼠标都可用
"set mouse=a
" 自动改变当前目录
"set autochdir
" 备份和缓存
set nobackup
set noswapfile
" 代码折叠
set foldmethod=marker
" 共享外部剪贴板
set clipboard+=unnamed
" Diff 模式的时候鼠标同步滚动 for Vim7.3
"set cursorbind
" 定义 <Leader> 为逗号
"let mapleader = ","
let maplocalleader = ",""设置快速编辑.vimrc文件 ,e 编辑.vimrc
" 快速修改 vimrc 文件
if has("win32")
map <silent> <leader>e :e $VIM/_vimrc<cr>
else
map <silent> <leader>e :e $HOME/.vimrc<cr>
endif
"保存.vimrc文件后会自动调用新的.vimrc
"autocmd! bufwritepost .vimrc source $HOME/.vimrc

" =====================================================================
" Multi_language setting default encoding UTF
" =====================================================================

if has("multi_byte")
    set encoding=utf-8
    if has('win32')
        language chinese
        let &termencoding=&encoding
    endif
    set nobomb " 不使用 Unicode 签名
    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
        set ambiwidth=double
    endif
else
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif

" ===========================================
" AutoCmd
" ===========================================
if has("autocmd")
    filetype plugin indent on
endif
"if has("autocmd")
"    filetype plugin indent on
"    " 括号自动补全
"    func! AutoClose()
"        ":inoremap ( ()<ESC>i
"        ":inoremap " ""<ESC>i
"        ":inoremap ' ''<ESC>i
"        ":inoremap { {}<ESC>i
"        ":inoremap [ []<ESC>i
"        ":inoremap ) <c-r>=ClosePair(')')<CR>
"        ":inoremap } <c-r>=ClosePair('}')<CR>
"        ":inoremap ] <c-r>=ClosePair(']')<CR>
"    endf
"    func! ClosePair(char)
"        if getline('.')[col('.') - 1] == a:char
"            return "\<Right>"
"        else
"            return a:char
"        endif
"    endf
"    augroup vimrcEx
"        au!
"        "autocmd FileType text setlocal textwidth=80
"        autocmd BufReadPost *
"                    \ if line("'\"") > 0 && line("'\"") <= line("$") |
"                    \   exe "normal g`\"" |
"                    \ endif
"    augroup END
"    " Auto close quotation marks for PHP, Javascript, etc, file
"    au FileType php,javascript,c,cpp exe AutoClose()
"endif
"------------------------------------------------------------------------------------
" =============
" Key Shortcut
" =============
nmap <leader>l :set list!<cr>
map <F6> zM " 关闭所有折
map <F7> zR " 打开所有折叠
map <F12> :!ctags -R<CR>
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
map <silent><leader>ww <c-w>w
map <silent><leader>wl <c-w>l
map <silent><leader>wk <c-w>k
map <silent><leader>wj <c-w>j
map <silent><leader>wh <c-w>h
map <silent><leader>wn <c-w>n
map <silent><leader>wr <c-w>r
map <silent><leader>wR <c-w>R
map <silent><leader>wx <c-w>x
map <silent><leader>wo <c-w>o
imap jk <esc>
"==================
" Bundle setting
"=================

syntax enable
colorscheme desert
syntax on
"let g:molokai_original = 1
"let g:rehash256 = 1
"colorscheme desert

"blue.vim      default.vim  desert.vim   evening.vim  morning.vim  pablo.vim
"README.txt  shine.vim  torte.vim
"darkblue.vim  delek.vim    elflord.vim  koehler.vim  murphy.vim   peachpuff.vim
"ron.vim     slate.vim  zellner.vim
" 行尾空格
" 行末: $
" 行首: ^
" 空格: \\s
" 行末空格: \s\+$
" 行首空格: ^\s\+
" 删除行尾空格: :%s/\s\+$//

" listchars
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
"Or alternatively, the following can be used:
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * redraw!
au InsertLeave * match ExtraWhitespace /\s\+$/

"paste
set pastetoggle=<F10>

"cpp ab
iab cppm int main()<cr>{<cr>Solution func;<cr>return 0;<cr>}<cr><esc>kkkho

"newtrw
"NERDTree
map <F11> :e .<cr>
"nmap <silent><F11> :exec("NERDTree ".expand('%:h'))<CR>
"let g:NERDTreeWinPos="righ"
"let g:NERDTreeWinSize=25


"""" note """"
"zz: line center   z.
"zt: line top
"zb  line bottom   z-
"ctrl+e  up
"ctrl+y  down

"auto write when change buff or quit
set autowriteall
"-----------------------------------------------------------------------------------------------------------------------
"-------------------------------------------------------------------------------
"1、设置TERM环境变量为xterm 或者 xterm-color，可以在.bashrc文件中添加：export TERM=xterm-color
"2、设置vim的t_ti和t_te变量的值（可选，例如在CentOS上就不需要）
"用vim打开一个文件，normal模式下输入:set t_ti 或者 :set t_te，
"若值类似："^[[?1049h" and "^[[?1049l"，那么你需要在.vimrc中加入下面几行：
"
"if &term =~ "xterm"
"    " SecureCRT versions prior to 6.1.x do not support 4-digit DECSET
"    "    let &t_ti = "\<Esc>[?1049h"
"    "    let &t_te = "\<Esc>[?1049l"
"    " Use 2-digit DECSET instead
"    let &t_ti = "\<Esc>[?47h"
"    let &t_te = "\<Esc>[?47l"
"endif
"
"altscreen on  ".screenrc
if &term =~ "xterm"
    " SecureCRT versions prior to 6.1.x do not support 4-digit DECSET
    "    let &t_ti = "\<Esc>[?1049h"
    "    let &t_te = "\<Esc>[?1049l"
    " Use 2-digit DECSET instead
    let &t_ti = "\<Esc>[?47h"
    let &t_te = "\<Esc>[?47l"
endif
